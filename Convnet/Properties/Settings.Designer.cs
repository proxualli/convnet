//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Convnet.Properties 
{
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.6.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public double PixelSize {
            get {
                return ((double)(this["PixelSize"]));
            }
            set {
                this["PixelSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("60")]
        public int? RefreshInterval {
            get {
                return ((int?)(this["RefreshInterval"]));
            }
            set {
                this["RefreshInterval"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("4")]
        public int Optimizer {
            get {
                return ((int)(this["Optimizer"]));
            }
            set {
                this["Optimizer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int CurrentPage {
            get {
                return ((int)(this["CurrentPage"]));
            }
            set {
                this["CurrentPage"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1E-08")]
        public float AdaGradEps {
            get {
                return ((float)(this["AdaGradEps"]));
            }
            set {
                this["AdaGradEps"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1E-08")]
        public float AdamEps {
            get {
                return ((float)(this["AdamEps"]));
            }
            set {
                this["AdamEps"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.999")]
        public float AdamBeta2 {
            get {
                return ((float)(this["AdamBeta2"]));
            }
            set {
                this["AdamBeta2"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1E-08")]
        public float RMSpropEps {
            get {
                return ((float)(this["RMSpropEps"]));
            }
            set {
                this["RMSpropEps"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.01")]
        public float DefaultLearningRateAdaGrad {
            get {
                return ((float)(this["DefaultLearningRateAdaGrad"]));
            }
            set {
                this["DefaultLearningRateAdaGrad"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.001")]
        public float DefaultLearningRateAdam {
            get {
                return ((float)(this["DefaultLearningRateAdam"]));
            }
            set {
                this["DefaultLearningRateAdam"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.0001")]
        public float DefaultLearningRateRMSProp {
            get {
                return ((float)(this["DefaultLearningRateRMSProp"]));
            }
            set {
                this["DefaultLearningRateRMSProp"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.01")]
        public float DefaultLearningRateSGD {
            get {
                return ((float)(this["DefaultLearningRateSGD"]));
            }
            set {
                this["DefaultLearningRateSGD"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.01")]
        public float DefaultLearningRateSGDMomentum {
            get {
                return ((float)(this["DefaultLearningRateSGDMomentum"]));
            }
            set {
                this["DefaultLearningRateSGDMomentum"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.9")]
        public float DefaultMomentumAdam {
            get {
                return ((float)(this["DefaultMomentumAdam"]));
            }
            set {
                this["DefaultMomentumAdam"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.99")]
        public float DefaultMomentumRMSProp {
            get {
                return ((float)(this["DefaultMomentumRMSProp"]));
            }
            set {
                this["DefaultMomentumRMSProp"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool Timings {
            get {
                return ((bool)(this["Timings"]));
            }
            set {
                this["Timings"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1E-08")]
        public float AdamaxEps {
            get {
                return ((float)(this["AdamaxEps"]));
            }
            set {
                this["AdamaxEps"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.999")]
        public float AdamaxBeta2 {
            get {
                return ((float)(this["AdamaxBeta2"]));
            }
            set {
                this["AdamaxBeta2"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool PersistOptimizer {
            get {
                return ((bool)(this["PersistOptimizer"]));
            }
            set {
                this["PersistOptimizer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public uint GoToEpoch {
            get {
                return ((uint)(this["GoToEpoch"]));
            }
            set {
                this["GoToEpoch"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Normal")]
        public global::System.Diagnostics.ProcessPriorityClass Priority {
            get {
                return ((global::System.Diagnostics.ProcessPriorityClass)(this["Priority"]));
            }
            set {
                this["Priority"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public double PrioritySetter {
            get {
                return ((double)(this["PrioritySetter"]));
            }
            set {
                this["PrioritySetter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool ShowTrainingPlot {
            get {
                return ((bool)(this["ShowTrainingPlot"]));
            }
            set {
                this["ShowTrainingPlot"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public uint PlotType {
            get {
                return ((uint)(this["PlotType"]));
            }
            set {
                this["PlotType"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1E-08")]
        public float AdaDeltaEps {
            get {
                return ((float)(this["AdaDeltaEps"]));
            }
            set {
                this["AdaDeltaEps"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1E-08")]
        public float RAdamEps {
            get {
                return ((float)(this["RAdamEps"]));
            }
            set {
                this["RAdamEps"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.9")]
        public float RAdamBeta1 {
            get {
                return ((float)(this["RAdamBeta1"]));
            }
            set {
                this["RAdamBeta1"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.999")]
        public float RAdamBeta2 {
            get {
                return ((float)(this["RAdamBeta2"]));
            }
            set {
                this["RAdamBeta2"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.9")]
        public float DefaultMomentumSGDMomentum {
            get {
                return ((float)(this["DefaultMomentumSGDMomentum"]));
            }
            set {
                this["DefaultMomentumSGDMomentum"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[resnet-32-4-3-2-6-dropout-channelzeropad]\r\nDataset=CIFAR10\r\nDim=3,32,32\r\nZeroPad" +
            "=4,4\r\nRandomCrop=Yes\r\nWeightsFiller=HeNormal\r\nBiases=No\r\nMomentum=0.995\r\nScaling" +
            "=No\r\n\r\n[C1]\r\nType=Convolution\r\nInputs=Input\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r" +
            "\n[B1]\r\nType=BatchNormRelu\r\nInputs=C1\r\n\r\n[C2]\r\nType=Convolution\r\nInputs=B1\r\nChann" +
            "els=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[B2]\r\nType=BatchNormReluDropout\r\nInputs=C2\r\nDropo" +
            "ut=0.3\r\n\r\n[C3]\r\nType=Convolution\r\nInputs=B2\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r" +
            "\n[C4]\r\nType=Convolution\r\nInputs=B1\r\nChannels=96\r\nKernel=1,1\r\n\r\n[A1]\r\nType=Add\r\nI" +
            "nputs=C3,C4\r\n\r\n[B5]\r\nType=BatchNormRelu\r\nInputs=A1\r\n\r\n[C5]\r\nType=Convolution\r\nIn" +
            "puts=B5\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[B6]\r\nType=BatchNormReluDropout\r\nIn" +
            "puts=C5\r\nDropout=0.3\r\n\r\n[C6]\r\nType=Convolution\r\nInputs=B6\r\nChannels=96\r\nKernel=3" +
            ",3\r\nPad=1,1\r\n\r\n[A2]\r\nType=Add\r\nInputs=C6,A1\r\n\r\n[B7]\r\nType=BatchNormRelu\r\nInputs=" +
            "A2\r\n\r\n[C7]\r\nType=Convolution\r\nInputs=B7\r\nChannels=192\r\nKernel=3,3\r\nStride=2,2\r\nP" +
            "ad=1,1\r\n\r\n[B8]\r\nType=BatchNormReluDropout\r\nInputs=C7\r\nDropout=0.3\r\n\r\n[C8]\r\nType=" +
            "Convolution\r\nInputs=B8\r\nChannels=192\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[AVG1]\r\nType=AvgPoo" +
            "ling\r\nInputs=A2\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[CZP1]\r\nType=ChannelZeroPad\r" +
            "\nInputs=AVG1\r\nChannels=192\r\n\r\n[A3]\r\nType=Add\r\nInputs=C8,CZP1\r\n\r\n[B9]\r\nType=Batch" +
            "NormRelu\r\nInputs=A3\r\n\r\n[C9]\r\nType=Convolution\r\nInputs=B9\r\nChannels=192\r\nKernel=3" +
            ",3\r\nPad=1,1\r\n\r\n[B10]\r\nType=BatchNormReluDropout\r\nInputs=C9\r\nDropout=0.3\r\n\r\n[C10]" +
            "\r\nType=Convolution\r\nInputs=B10\r\nChannels=192\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A4]\r\nType=" +
            "Add\r\nInputs=C10,A3\r\n\r\n[B11]\r\nType=BatchNormRelu\r\nInputs=A4\r\n\r\n[C11]\r\nType=Convol" +
            "ution\r\nInputs=B11\r\nChannels=384\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[B12]\r\nType=" +
            "BatchNormReluDropout\r\nInputs=C11\r\nDropout=0.3\r\n\r\n[C12]\r\nType=Convolution\r\nInputs" +
            "=B12\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[AVG2]\r\nType=AvgPooling\r\nInputs=A4\r\nK" +
            "ernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[CZP2]\r\nType=ChannelZeroPad\r\nInputs=AVG2\r\nChan" +
            "nels=384\r\n\r\n[A5]\r\nType=Add\r\nInputs=C12,CZP2\r\n\r\n[B13]\r\nType=BatchNormRelu\r\nInputs" +
            "=A5\r\n\r\n[C13]\r\nType=Convolution\r\nInputs=B13\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r" +
            "\n[B14]\r\nType=BatchNormReluDropout\r\nInputs=C13\r\nDropout=0.3\r\n\r\n[C14]\r\nType=Convol" +
            "ution\r\nInputs=B14\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A6]\r\nType=Add\r\nInputs=C" +
            "14,A5\r\n\r\n[B15]\r\nType=BatchNormRelu\r\nInputs=A6\r\n\r\n[C15]\r\nType=Convolution\r\nInputs" +
            "=B15\r\nChannels=10\r\nKernel=1,1\r\n\r\n[B16]\r\nType=BatchNorm\r\nInputs=C15\r\n\r\n[GAP]\r\nTyp" +
            "e=GlobalAvgPooling\r\nInputs=B16\r\n\r\n[ACT]\r\nType=Activation\r\nInputs=GAP\r\nActivation" +
            "=Softmax\r\n\r\n[Cost]\r\nType=Cost\r\nInputs=ACT\r\nCost=CategoricalCrossEntropy\r\nChannel" +
            "s=10")]
        public string DefinitionEditing {
            get {
                return ((string)(this["DefinitionEditing"]));
            }
            set {
                this["DefinitionEditing"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[resnet-32-4-3-2-6-dropout-channelzeropad]\r\nDataset=CIFAR10\r\nDim=3,32,32\r\nZeroPad" +
            "=4,4\r\nRandomCrop=Yes\r\nWeightsFiller=HeNormal\r\nBiases=No\r\nMomentum=0.995\r\nScaling" +
            "=No\r\n\r\n[C1]\r\nType=Convolution\r\nInputs=Input\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r" +
            "\n[B1]\r\nType=BatchNormRelu\r\nInputs=C1\r\n\r\n[C2]\r\nType=Convolution\r\nInputs=B1\r\nChann" +
            "els=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[B2]\r\nType=BatchNormReluDropout\r\nInputs=C2\r\nDropo" +
            "ut=0.3\r\n\r\n[C3]\r\nType=Convolution\r\nInputs=B2\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r" +
            "\n[C4]\r\nType=Convolution\r\nInputs=B1\r\nChannels=96\r\nKernel=1,1\r\n\r\n[A1]\r\nType=Add\r\nI" +
            "nputs=C3,C4\r\n\r\n[B5]\r\nType=BatchNormRelu\r\nInputs=A1\r\n\r\n[C5]\r\nType=Convolution\r\nIn" +
            "puts=B5\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[B6]\r\nType=BatchNormReluDropout\r\nIn" +
            "puts=C5\r\nDropout=0.3\r\n\r\n[C6]\r\nType=Convolution\r\nInputs=B6\r\nChannels=96\r\nKernel=3" +
            ",3\r\nPad=1,1\r\n\r\n[A2]\r\nType=Add\r\nInputs=C6,A1\r\n\r\n[B7]\r\nType=BatchNormRelu\r\nInputs=" +
            "A2\r\n\r\n[C7]\r\nType=Convolution\r\nInputs=B7\r\nChannels=192\r\nKernel=3,3\r\nStride=2,2\r\nP" +
            "ad=1,1\r\n\r\n[B8]\r\nType=BatchNormReluDropout\r\nInputs=C7\r\nDropout=0.3\r\n\r\n[C8]\r\nType=" +
            "Convolution\r\nInputs=B8\r\nChannels=192\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[AVG1]\r\nType=AvgPoo" +
            "ling\r\nInputs=A2\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[CZP1]\r\nType=ChannelZeroPad\r" +
            "\nInputs=AVG1\r\nChannels=192\r\n\r\n[A3]\r\nType=Add\r\nInputs=C8,CZP1\r\n\r\n[B9]\r\nType=Batch" +
            "NormRelu\r\nInputs=A3\r\n\r\n[C9]\r\nType=Convolution\r\nInputs=B9\r\nChannels=192\r\nKernel=3" +
            ",3\r\nPad=1,1\r\n\r\n[B10]\r\nType=BatchNormReluDropout\r\nInputs=C9\r\nDropout=0.3\r\n\r\n[C10]" +
            "\r\nType=Convolution\r\nInputs=B10\r\nChannels=192\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A4]\r\nType=" +
            "Add\r\nInputs=C10,A3\r\n\r\n[B11]\r\nType=BatchNormRelu\r\nInputs=A4\r\n\r\n[C11]\r\nType=Convol" +
            "ution\r\nInputs=B11\r\nChannels=384\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[B12]\r\nType=" +
            "BatchNormReluDropout\r\nInputs=C11\r\nDropout=0.3\r\n\r\n[C12]\r\nType=Convolution\r\nInputs" +
            "=B12\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[AVG2]\r\nType=AvgPooling\r\nInputs=A4\r\nK" +
            "ernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[CZP2]\r\nType=ChannelZeroPad\r\nInputs=AVG2\r\nChan" +
            "nels=384\r\n\r\n[A5]\r\nType=Add\r\nInputs=C12,CZP2\r\n\r\n[B13]\r\nType=BatchNormRelu\r\nInputs" +
            "=A5\r\n\r\n[C13]\r\nType=Convolution\r\nInputs=B13\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r" +
            "\n[B14]\r\nType=BatchNormReluDropout\r\nInputs=C13\r\nDropout=0.3\r\n\r\n[C14]\r\nType=Convol" +
            "ution\r\nInputs=B14\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A6]\r\nType=Add\r\nInputs=C" +
            "14,A5\r\n\r\n[B15]\r\nType=BatchNormRelu\r\nInputs=A6\r\n\r\n[C15]\r\nType=Convolution\r\nInputs" +
            "=B15\r\nChannels=10\r\nKernel=1,1\r\n\r\n[B16]\r\nType=BatchNorm\r\nInputs=C15\r\n\r\n[GAP]\r\nTyp" +
            "e=GlobalAvgPooling\r\nInputs=B16\r\n\r\n[ACT]\r\nType=Activation\r\nInputs=GAP\r\nActivation" +
            "=Softmax\r\n\r\n[Cost]\r\nType=Cost\r\nInputs=ACT\r\nCost=CategoricalCrossEntropy\r\nChannel" +
            "s=10")]
        public string DefinitionActive {
            get {
                return ((string)(this["DefinitionActive"]));
            }
            set {
                this["DefinitionActive"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("resnet-32-4-3-2-6-dropout-channelzeropad")]
        public string ModelNameActive {
            get {
                return ((string)(this["ModelNameActive"]));
            }
            set {
                this["ModelNameActive"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("420")]
        public global::System.Windows.GridLength EditSplitPositionA {
            get {
                return ((global::System.Windows.GridLength)(this["EditSplitPositionA"]));
            }
            set {
                this["EditSplitPositionA"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int SelectedLayer {
            get {
                return ((int)(this["SelectedLayer"]));
            }
            set {
                this["SelectedLayer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool DisableLocking {
            get {
                return ((bool)(this["DisableLocking"]));
            }
            set {
                this["DisableLocking"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nu" +
            "sing System.Diagnostics;\r\nusing System.Globalization;\r\nusing System.Linq;\r\n\r\nusi" +
            "ng Float = System.Single;\r\nusing size_t = System.UInt64;\r\n\r\nnamespace Convnet\r\n{" +
            "\r\npublic class ScriptsCatalogDynamic\r\n{\r\n    public const string nwl = \"\\r\\n\";\r\n" +
            "\r\n    public static string to_string(bool variable)\r\n    {\r\n        return varia" +
            "ble ? \"Yes\" : \"No\";\r\n    }\r\n\r\n    public static string to_string(size_t number)\r" +
            "\n    {\r\n        return number.ToString();\r\n    }\r\n\r\n    public static string to_" +
            "string(Float number)\r\n    {\r\n        var ci = new CultureInfo(\"en-US\");\r\n       " +
            " return number.ToString(ci);\r\n    }\r\n\r\n    public static string to_string(Datase" +
            "ts dataset)\r\n    {\r\n        return dataset.ToString();\r\n    }\r\n\r\n    public stat" +
            "ic string to_string(Fillers filler)\r\n    {\r\n        return filler.ToString();\r\n " +
            "   }\r\n\r\n    public static size_t DIV8(size_t channels)\r\n    {\r\n        if (chann" +
            "els % 8ul == 0ul)\r\n            return channels;\r\n\r\n        return ((channels / 8" +
            "ul) + 1ul) * 8ul;\r\n    }\r\n\r\n    public static string In(string prefix, size_t id" +
            ")\r\n    {\r\n        return prefix + to_string(id);\r\n    }\r\n\r\n    public static str" +
            "ing BatchNorm(size_t id, string inputs, string group = \"\", string prefix = \"B\")\r" +
            "\n    {\r\n        return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n     " +
            "      \"Type=BatchNorm\" + nwl +\r\n           \"Inputs=\" + inputs + nwl + nwl;\r\n    " +
            "}\r\n\r\n    public static string BatchNormRelu(size_t id, string inputs, string gro" +
            "up = \"\", string prefix = \"B\")\r\n    {\r\n        return \"[\" + group + prefix + to_s" +
            "tring(id) + \"]\" + nwl +\r\n           \"Type=BatchNormRelu\" + nwl +\r\n           \"In" +
            "puts=\" + inputs + nwl + nwl;\r\n    }\r\n\r\n    public static string BatchNormReluDro" +
            "pout(size_t id, string inputs, string group = \"\", string prefix = \"B\")\r\n    {\r\n " +
            "       return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n           \"Ty" +
            "pe=BatchNormReluDropout\" + nwl +\r\n           \"Inputs=\" + inputs + nwl + nwl;\r\n  " +
            "  }\r\n\r\n    public static string Convolution(size_t id, string inputs, size_t cha" +
            "nnels, size_t kernelX = 3, size_t kernelY = 3, size_t strideX = 1, size_t stride" +
            "Y = 1, size_t padX = 1, size_t padY = 1, string group = \"\", string prefix = \"C\")" +
            "\r\n    {\r\n        return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n    " +
            "        \"Type=Convolution\" + nwl +\r\n            \"Inputs=\" + inputs + nwl +\r\n    " +
            "        \"Channels=\" + to_string(channels) + nwl +\r\n            \"Kernel=\" + to_st" +
            "ring(kernelX) + \",\" + to_string(kernelY) + nwl +\r\n            (strideX != 1 || s" +
            "trideY != 1 ? \"Stride=\" + to_string(strideX) + \",\" + to_string(strideY) + nwl : " +
            "\"\") +\r\n            (padX != 0 || padY != 0 ? \"Pad=\" + to_string(padX) + \",\" + to" +
            "_string(padY) + nwl + nwl : nwl);\r\n    }\r\n\r\n    public static string DepthwiseCo" +
            "nvolution(size_t id, string inputs, size_t multiplier = 1, size_t kernelX = 3, s" +
            "ize_t kernelY = 3, size_t strideX = 1, size_t strideY = 1, size_t padX = 1, size" +
            "_t padY = 1, string group = \"\", string prefix = \"DC\")\r\n    {\r\n        return \"[\"" +
            " + group + prefix + to_string(id) + \"]\" + nwl +\r\n            \"Type=DepthwiseConv" +
            "olution\" + nwl +\r\n            \"Inputs=\" + inputs + nwl +\r\n            (multiplie" +
            "r > 1 ? \"Multiplier=\" + to_string(multiplier) + nwl : \"\") +\r\n            \"Kernel" +
            "=\" + to_string(kernelX) + \",\" + to_string(kernelY) + nwl +\r\n            (strideX" +
            " != 1 || strideY != 1 ? \"Stride=\" + to_string(strideX) + \",\" + to_string(strideY" +
            ") + nwl : \"\") +\r\n            (padX != 0 || padY != 0 ? \"Pad=\" + to_string(padX) " +
            "+ \",\" + to_string(padY) + nwl + nwl : nwl);\r\n    }\r\n\r\n    public static string P" +
            "artialDepthwiseConvolution(size_t id, string inputs, size_t part = 1, size_t gro" +
            "ups = 1, size_t kernelX = 3, size_t kernelY = 3, size_t strideX = 1, size_t stri" +
            "deY = 1, size_t padX = 1, size_t padY = 1, string group = \"\", string prefix = \"D" +
            "C\")\r\n    {\r\n        return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n " +
            "           \"Type=PartialDepthwiseConvolution\" + nwl +\r\n            \"Inputs=\" + i" +
            "nputs + nwl +\r\n            \"Group=\" + to_string(part) + nwl +\r\n            \"Grou" +
            "ps=\" + to_string(groups) + nwl +\r\n            \"Kernel=\" + to_string(kernelX) + \"" +
            ",\" + to_string(kernelY) + nwl +\r\n            (strideX != 1 || strideY != 1 ? \"St" +
            "ride=\" + to_string(strideX) + \",\" + to_string(strideY) + nwl : \"\") +\r\n          " +
            "  (padX != 0 || padY != 0 ? \"Pad=\" + to_string(padX) + \",\" + to_string(padY) + n" +
            "wl + nwl : nwl);\r\n    }\r\n\r\n    public static string DepthwiseMixedConvolution(si" +
            "ze_t g, size_t id, string inputs, size_t strideX = 1, size_t strideY = 1, bool u" +
            "seChannelSplit = true, string group = \"\", string prefix = \"DC\")\r\n    {\r\n        " +
            "switch (g)\r\n        {\r\n            case 0:\r\n                return DepthwiseConv" +
            "olution(id, inputs, 1, 3, 3, strideX, strideY, 1, 1, group, prefix);\r\n\r\n        " +
            "    case 1:\r\n                return useChannelSplit ? ChannelSplit(id, inputs, 2" +
            ", 1, \"Q1\") + ChannelSplit(id, inputs, 2, 2, \"Q2\") +\r\n                    Depthwi" +
            "seConvolution(id, In(\"Q1CS\", id), 1, 3, 3, strideX, strideY, 1, 1, \"A\") + Depthw" +
            "iseConvolution(id, In(\"Q2CS\", id), 1, 5, 5, strideX, strideY, 2, 2, \"B\") +\r\n    " +
            "                Concat(id, In(\"ADC\", id) + \",\" + In(\"BDC\", id), group, prefix) :" +
            "\r\n                    PartialDepthwiseConvolution(id, inputs, 1, 2, 3, 3, stride" +
            "X, strideY, 1, 1, \"A\") + PartialDepthwiseConvolution(id, inputs, 2, 2, 5, 5, str" +
            "ideX, strideY, 2, 2, \"B\") +\r\n                    Concat(id, In(\"ADC\", id) + \",\" " +
            "+ In(\"BDC\", id), group, prefix);\r\n\r\n            case 2:\r\n                return " +
            "useChannelSplit ? ChannelSplit(id, inputs, 3, 1, \"Q1\") + ChannelSplit(id, inputs" +
            ", 3, 2, \"Q2\") + ChannelSplit(id, inputs, 3, 3, \"Q3\") +\r\n                    Dept" +
            "hwiseConvolution(id, In(\"Q1CS\", id), 1, 3, 3, strideX, strideY, 1, 1, \"A\") + Dep" +
            "thwiseConvolution(id, In(\"Q2CS\", id), 1, 5, 5, strideX, strideY, 2, 2, \"B\") + De" +
            "pthwiseConvolution(id, In(\"Q3CS\", id), 1, 7, 7, strideX, strideY, 3, 3, \"C\") +\r\n" +
            "                    Concat(id, In(\"ADC\", id) + \",\" + In(\"BDC\", id) + \",\" + In(\"C" +
            "DC\", id), group, prefix) :\r\n                    PartialDepthwiseConvolution(id, " +
            "inputs, 1, 3, 3, 3, strideX, strideY, 1, 1, \"A\") + PartialDepthwiseConvolution(i" +
            "d, inputs, 2, 3, 5, 5, strideX, strideY, 2, 2, \"B\") +\r\n                    Parti" +
            "alDepthwiseConvolution(id, inputs, 3, 3, 7, 7, strideX, strideY, 3, 3, \"C\") +\r\n " +
            "                   Concat(id, In(\"ADC\", id) + \",\" + In(\"BDC\", id) + \",\" + In(\"CD" +
            "C\", id), group, prefix);\r\n            default:\r\n                return useChanne" +
            "lSplit ? ChannelSplit(id, inputs, 4, 1, \"Q1\") + ChannelSplit(id, inputs, 4, 2, \"" +
            "Q2\") + ChannelSplit(id, inputs, 4, 3, \"Q3\") + ChannelSplit(id, inputs, 4, 4, \"Q4" +
            "\") +\r\n                    DepthwiseConvolution(id, In(\"Q1CS\", id), 1, 3, 3, stri" +
            "deX, strideY, 1, 1, \"A\") + DepthwiseConvolution(id, In(\"Q2CS\", id), 1, 5, 5, str" +
            "ideX, strideY, 2, 2, \"B\") +\r\n                    DepthwiseConvolution(id, In(\"Q3" +
            "CS\", id), 1, 7, 7, strideX, strideY, 3, 3, \"C\") + DepthwiseConvolution(id, In(\"Q" +
            "4CS\", id), 1, 9, 9, strideX, strideY, 4, 4, \"D\") +\r\n                    Concat(i" +
            "d, In(\"ADC\", id) + \",\" + In(\"BDC\", id) + \",\" + In(\"CDC\", id) + \",\" + In(\"DDC\", i" +
            "d), group, prefix) :\r\n                    PartialDepthwiseConvolution(id, inputs" +
            ", 1, 4, 3, 3, strideX, strideY, 1, 1, \"A\") + PartialDepthwiseConvolution(id, inp" +
            "uts, 2, 4, 5, 5, strideX, strideY, 2, 2, \"B\") +\r\n                    PartialDept" +
            "hwiseConvolution(id, inputs, 3, 4, 7, 7, strideX, strideY, 3, 3, \"C\") + PartialD" +
            "epthwiseConvolution(id, inputs, 4, 4, 9, 9, strideX, strideY, 4, 4, \"D\") +\r\n    " +
            "                Concat(id, In(\"ADC\", id) + \",\" + In(\"BDC\", id) + \",\" + In(\"CDC\"," +
            " id) + \",\" + In(\"DDC\", id), group, prefix);\r\n        }\r\n    }\r\n\r\n    public stat" +
            "ic string ChannelSplit(size_t id, string inputs, size_t groups, size_t part, str" +
            "ing group = \"\", string prefix = \"CS\")\r\n    {\r\n        return \"[\" + group + prefi" +
            "x + to_string(id) + \"]\" + nwl +\r\n           \"Type=ChannelSplit\" + nwl +\r\n       " +
            "    \"Inputs=\" + inputs + nwl +\r\n           \"Groups=\" + to_string(groups) + nwl +" +
            "\r\n           \"Group=\" + to_string(part) + nwl + nwl;\r\n    }\r\n\r\n    public static" +
            " string ChannelShuffle(size_t id, string inputs, size_t groups = 2, string group" +
            " = \"\", string prefix = \"CSH\")\r\n    {\r\n        return \"[\" + group + prefix + to_s" +
            "tring(id) + \"]\" + nwl +\r\n           \"Type=ChannelShuffle\" + nwl +\r\n           \"I" +
            "nputs=\" + inputs + nwl +\r\n           \"Groups=\" + to_string(groups) + nwl + nwl;\r" +
            "\n    }\r\n\r\n    public static string Concat(size_t id, string inputs, string group" +
            " = \"\", string prefix = \"CC\")\r\n    {\r\n        return \"[\" + group + prefix + to_st" +
            "ring(id) + \"]\" + nwl +\r\n           \"Type=Concat\" + nwl +\r\n           \"Inputs=\" +" +
            " inputs + nwl + nwl;\r\n    }\r\n\r\n    public static string GlobalAvgPooling(string " +
            "input, string group = \"\", string prefix = \"GAP\")\r\n    {\r\n        return \"[\" + gr" +
            "oup + prefix + \"]\" + nwl +\r\n            \"Type=GlobalAvgPooling\" + nwl +\r\n       " +
            "     \"Inputs=\" + input + nwl + nwl;\r\n    }\r\n\r\n    public static string BatchNorm" +
            "HardLogistic(size_t id, string inputs, string group = \"\", string prefix = \"B\")\r\n" +
            "    {\r\n        return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n      " +
            "    \"Type=BatchNormHardLogistic\" + nwl +\r\n          \"Inputs=\" + inputs + nwl + n" +
            "wl;\r\n    }\r\n\r\n    public static string BatchNormHardSwish(size_t id, string inpu" +
            "ts, string group = \"\", string prefix = \"B\")\r\n    {\r\n        return \"[\" + group +" +
            " prefix + to_string(id) + \"]\" + nwl +\r\n          \"Type=BatchNormHardSwish\" + nwl" +
            " +\r\n          \"Inputs=\" + inputs + nwl + nwl;\r\n    }\r\n\r\n    public static string" +
            " Add(size_t id, string inputs, string group = \"\", string prefix = \"A\")\r\n    {\r\n " +
            "       return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n           \"Ty" +
            "pe=Add\" + nwl +\r\n           \"Inputs=\" + inputs + nwl + nwl;\r\n    }\r\n\r\n    public" +
            " static string ChannelMultiply(string inputs, string group = \"\", string prefix =" +
            " \"CM\")\r\n    {\r\n        return \"[\" + group + prefix + \"]\" + nwl +\r\n           \"Ty" +
            "pe=ChannelMultiply\" + nwl +\r\n           \"Inputs=\" + inputs + nwl + nwl;\r\n    }\r\n" +
            "\r\n    public static string Dropout(size_t id, string inputs, string group = \"\", " +
            "string prefix = \"D\")\r\n    {\r\n        return \"[\" + group + prefix + to_string(id)" +
            " + \"]\" + nwl +\r\n           \"Type=Dropout\" + nwl +\r\n           \"Inputs=\" + inputs" +
            " + nwl + nwl;\r\n    }\r\n\r\n    public static string Generate(Convnet.ScriptParamete" +
            "rs p)\r\n    {\r\n\r\n        var net =\r\n            \"[\" + p.ModelName + \"]\" + nwl +\r\n" +
            "            \"Dataset=\" + to_string(p.Dataset) + nwl +\r\n            \"Dim=\" + to_s" +
            "tring(p.C) + \",\" + to_string(p.H) + \",\" + to_string(p.W) + nwl +\r\n            ((" +
            "p.PadH > 0 || p.PadW > 0) ? (!p.MirrorPad ? \"ZeroPad=\" + to_string(p.PadH) + \",\"" +
            " + to_string(p.PadW) + nwl : \"MirrorPad=\" + to_string(p.PadH) + \",\" + to_string(" +
            "p.PadW) + nwl) : \"\") +\r\n            ((p.PadH > 0 || p.PadW > 0) ? \"RandomCrop=Ye" +
            "s\" + nwl : \"\") +\r\n            \"WeightsFiller=\" + to_string(p.WeightsFiller) + (p" +
            ".WeightsScaleVisible ? \"(\" + to_string(p.WeightsScale) + \")\" : \"\") + nwl +\r\n    " +
            "        (p.WeightsLRM != 1 ? \"WeightsLRM=\" + to_string(p.WeightsLRM) + nwl : \"\")" +
            " +\r\n            (p.WeightsWDM != 1 ? \"WeightsWDM=\" + to_string(p.WeightsWDM) + n" +
            "wl : \"\") +\r\n            (p.HasBias ? \"BiasesFiller=\" + to_string(p.BiasesFiller)" +
            " + (p.BiasesScaleVisible ? \"(\" + to_string(p.BiasesScale) + \")\" : \"\") + nwl +\r\n " +
            "           (p.BiasesLRM != 1 ? \"BiasesLRM=\" + to_string(p.BiasesLRM) + nwl : \"\")" +
            " +\r\n            (p.BiasesWDM != 1 ? \"BiasesWDM=\" + to_string(p.BiasesWDM) + nwl " +
            ": \"\") : \"Biases=No\" + nwl) +\r\n            (p.DropoutVisible ? \"Dropout=\" + to_st" +
            "ring(p.Dropout) + nwl : \"\") +\r\n            \"Scaling=\" + to_string(p.BatchNormSca" +
            "ling) + nwl +\r\n            \"Momentum=\" + to_string(p.BatchNormMomentum) + nwl +\r" +
            "\n            \"Eps=\" + to_string(p.BatchNormEps) + nwl + nwl;\r\n\r\n        var bloc" +
            "ks = new List<string>();\r\n\r\n        switch (p.Script)\r\n        {\r\n            ca" +
            "se Scripts.densenet:\r\n                {\r\n                    var channels = DIV8" +
            "(p.GrowthRate);\r\n\r\n                    net += Convolution(1, \"Input\", channels, " +
            "3, 3, 1, 1, 1, 1);\r\n\r\n                    if (p.Bottleneck)\r\n                   " +
            " {\r\n                        blocks.Add(\r\n                            BatchNormRe" +
            "lu(1, \"C1\") +\r\n                            Convolution(2, \"B1\", DIV8(4 * p.Growt" +
            "hRate), 1, 1, 1, 1, 0, 0) +\r\n                            BatchNormRelu(2, \"C2\") " +
            "+\r\n                            Convolution(3, \"B2\", DIV8(p.GrowthRate), 3, 3, 1," +
            " 1, 1, 1) +\r\n                            (p.Dropout > 0 ? Dropout(3, \"C3\") + Con" +
            "cat(1, \"C1,D3\") : Concat(1, \"C1,C3\")));\r\n                    }\r\n                " +
            "    else\r\n                    {\r\n                        blocks.Add(\r\n          " +
            "                  BatchNormRelu(1, \"C1\") +\r\n                            Convolut" +
            "ion(2, \"B1\", DIV8(p.GrowthRate), 3, 3, 1, 1, 1, 1) +\r\n                          " +
            "  (p.Dropout > 0 ? Dropout(2, \"C2\") + Concat(1, \"C1,D2\") : Concat(1, \"C1,C2\")));" +
            "\r\n                    }\r\n\r\n                    var CC = 1ul;\r\n                  " +
            "  var C = p.Bottleneck ? 4ul : 3ul;\r\n\r\n                    channels += p.GrowthR" +
            "ate;\r\n\r\n                    for (var g = 1ul; g <= p.Groups; g++)  // 32*32 16*1" +
            "6 8*8 or 28*28 14*14 7*7\r\n                    {\r\n                        for (va" +
            "r i = 1ul; i < p.Iterations; i++)\r\n                        {\r\n                  " +
            "          if (p.Bottleneck)\r\n                            {\r\n                    " +
            "            blocks.Add(\r\n                                    BatchNormRelu(C, In" +
            "(\"CC\", CC)) +\r\n                                    Convolution(C, In(\"B\", C), DI" +
            "V8(4 * p.GrowthRate), 1, 1, 1, 1, 0, 0) +\r\n                                    B" +
            "atchNormRelu(C + 1, In(\"C\", C)) +\r\n                                    Convoluti" +
            "on(C + 1, In(\"B\", C + 1), DIV8(p.GrowthRate), 3, 3, 1, 1, 1, 1) +\r\n             " +
            "                       (p.Dropout > 0 ? Dropout(C + 1, In(\"C\", C + 1)) + Concat(" +
            "CC + 1, In(\"CC\", CC) + \",\" + In(\"D\", C + 1)) : Concat(CC + 1, In(\"CC\", CC) + \",\"" +
            " + In(\"C\", C + 1))));\r\n\r\n                                C += 2;\r\n              " +
            "              }\r\n                            else\r\n                            {" +
            "\r\n                                blocks.Add(\r\n                                 " +
            "   BatchNormRelu(C, In(\"CC\", CC)) +\r\n                                    Convolu" +
            "tion(C, In(\"B\", C), DIV8(p.GrowthRate), 3, 3, 1, 1, 1, 1) +\r\n                   " +
            "                 (p.Dropout > 0 ? Dropout(C, In(\"C\", C)) + Concat(CC + 1, In(\"CC" +
            "\", CC) + \",\" + In(\"D\", C)) : Concat(CC + 1, In(\"CC\", CC) + \",\" + In(\"C\", C))));\r" +
            "\n\r\n                                C++;\r\n                            }\r\n\r\n      " +
            "                      CC++;\r\n                            channels += p.GrowthRat" +
            "e;\r\n                        }\r\n\r\n                        if (g < p.Groups)\r\n    " +
            "                    {\r\n                            channels = DIV8((size_t)Syste" +
            "m.Math.Floor(2.0 * channels * p.Compression));\r\n\r\n                            if" +
            " (p.Dropout > 0)\r\n                                blocks.Add(\r\n                 " +
            "                   Convolution(C, In(\"CC\", CC), channels, 1, 1, 1, 1, 0, 0) +\r\n " +
            "                                   Dropout(C, In(\"C\", C)) +\r\n                   " +
            "                 \"[P\" + to_string(g) + \"]\" + nwl + \"Type=AvgPooling\" + nwl + \"In" +
            "puts=D\" + to_string(C) + nwl + \"Kernel=2,2\" + nwl + \"Stride=2,2\" + nwl + nwl);\r\n" +
            "                            else\r\n                                blocks.Add(\r\n " +
            "                                   Convolution(C, \"CC\" + to_string(CC), channels" +
            ", 1, 1, 1, 1, 0, 0) +\r\n                                    \"[P\" + to_string(g) +" +
            " \"]\" + nwl + \"Type=AvgPooling\" + nwl + \"Inputs=C\" + to_string(C) + nwl + \"Kernel" +
            "=2,2\" + nwl + \"Stride=2,2\" + nwl + nwl);\r\n                            C++;\r\n    " +
            "                        CC++;\r\n\r\n                            if (p.Bottleneck)\r\n" +
            "                            {\r\n                                blocks.Add(\r\n    " +
            "                                BatchNormRelu(C, In(\"P\", g)) +\r\n                " +
            "                    Convolution(C, In(\"B\", C), DIV8(4 * p.GrowthRate), 1, 1, 1, " +
            "1, 0, 0) +\r\n                                    BatchNormRelu(C + 1, In(\"C\", C))" +
            " +\r\n                                    Convolution(C + 1, In(\"B\", C + 1), DIV8(" +
            "p.GrowthRate), 3, 3, 1, 1, 1, 1) +\r\n                                    (p.Dropo" +
            "ut > 0 ? Dropout(C + 1, In(\"C\", C + 1)) + Concat(CC, In(\"B\", C) + \",\" + In(\"D\", " +
            "C + 1)) : Concat(CC, In(\"B\", C) + \",\" + In(\"C\", C + 1))));\r\n\r\n                  " +
            "              C += 2;\r\n                            }\r\n                          " +
            "  else\r\n                            {\r\n                                blocks.Ad" +
            "d(\r\n                                    BatchNormRelu(C, In(\"P\", g)) +\r\n        " +
            "                            Convolution(C, In(\"B\", C), DIV8(p.GrowthRate), 3, 3," +
            " 1, 1, 1, 1) +\r\n                                    (p.Dropout > 0 ? Dropout(C, " +
            "In(\"C\", C)) + Concat(CC, In(\"B\", C) + \",\" + In(\"D\", C)) : Concat(CC, In(\"B\", C) " +
            "+ \",\" + In(\"C\", C))));\r\n\r\n                                C++;\r\n                " +
            "            }\r\n\r\n                            channels += p.GrowthRate;\r\n        " +
            "                }\r\n                    }\r\n\r\n                    foreach (var blo" +
            "ck in blocks)\r\n                        net += block;\r\n\r\n                    net " +
            "+=\r\n                        Convolution(C, In(\"CC\", CC), p.Classes, 1, 1, 1, 1, " +
            "0, 0) +\r\n                        BatchNorm(C + 1, In(\"C\", C)) +\r\n               " +
            "         GlobalAvgPooling(In(\"B\", C + 1)) +\r\n                        \"[ACT]\" + n" +
            "wl + \"Type=Activation\" + nwl + \"Inputs=GAP\" + nwl + \"Activation=Softmax\" + nwl +" +
            " nwl +\r\n                        \"[Cost]\" + nwl + \"Type=Cost\" + nwl + \"Inputs=ACT" +
            "\" + nwl + \"Cost=CategoricalCrossEntropy\" + nwl + \"Channels=\" + to_string(p.Class" +
            "es);\r\n                }\r\n                break;\r\n\r\n            case Scripts.mobi" +
            "lenetv3:\r\n                {\r\n                    var channelsplit = true;\r\n     " +
            "               var W = p.Width * 16;\r\n\r\n                    net +=\r\n            " +
            "            Convolution(1, \"Input\", DIV8(W), 3, 3, 1, 1, 1, 1) +\r\n              " +
            "          BatchNormHardSwish(1, \"C1\");\r\n\r\n                    blocks.Add(\r\n     " +
            "                   Convolution(2, \"B1\", DIV8(6 * W), 1, 1, 1, 1, 0, 0) +\r\n      " +
            "                  BatchNormHardSwish(2, \"C2\") +\r\n                        Depthwi" +
            "seMixedConvolution(3, 3, \"B2\", 1, 1, channelsplit) +\r\n                        Ba" +
            "tchNormHardSwish(3, \"DC3\") +\r\n                        Convolution(4, \"B3\", DIV8(" +
            "W), 1, 1, 1, 1, 0, 0) +\r\n                        BatchNorm(4, \"C4\"));\r\n\r\n       " +
            "             var A = 1ul;\r\n                    var C = 6ul;\r\n\r\n                 " +
            "   for (var g = 1ul; g <= p.Groups; g++)  // 32*32 16*16 8*8 or 28*28 14*14 7*7\r" +
            "\n                    {\r\n                        if (g > 1)\r\n                    " +
            "    {\r\n                            W *= 2;\r\n\r\n                            var gr" +
            "oup = In(\"SE\", C + 1);\r\n                            var strSE =\r\n               " +
            "                 p.SqueezeExcitation ? GlobalAvgPooling(In(\"B\", C + 1), group) +" +
            "\r\n                                Convolution(1, group + \"GAP\", DIV8((6 * W) / 4" +
            "), 1, 1, 1, 1, 0, 0, group) +\r\n                                BatchNormHardSwis" +
            "h(1, group + \"C1\", group) +\r\n                                Convolution(2, grou" +
            "p + \"B1\", DIV8(6 * W), 1, 1, 1, 1, 0, 0, group) +\r\n                             " +
            "   BatchNormHardLogistic(2, group + \"C2\", group) +\r\n                            " +
            "    ChannelMultiply(In(\"B\", C + 1) + \",\" + group + \"B2\", group) +\r\n             " +
            "                   Convolution(C + 2, group + \"CM\", DIV8(W), 1, 1, 1, 1, 0, 0) :" +
            "\r\n                                Convolution(C + 2, In(\"B\", C + 1), DIV8(W), 1," +
            " 1, 1, 1, 0, 0);\r\n\r\n                            //auto strDropout = p.Dropout > " +
            "0 ? Dropout(C, In(\"A\", A)) +\r\n                            //    Convolution(C, I" +
            "n(\"D\", C), 6 * W, 1, 1, 1, 1, 0, 0) :\r\n                            //    Convolu" +
            "tion(C, In(\"A\", A), 6 * W, 1, 1, 1, 1, 0, 0);\r\n\r\n                            blo" +
            "cks.Add(\r\n                                Convolution(C, In(\"A\", A), DIV8(6 * W)" +
            ", 1, 1, 1, 1, 0, 0) +\r\n                                BatchNormHardSwish(C, In(" +
            "\"C\", C)) +\r\n                                DepthwiseMixedConvolution(3, C + 1, " +
            "In(\"B\", C), 2, 2, channelsplit) +\r\n                                BatchNormHard" +
            "Swish(C + 1, In(\"DC\", C + 1)) +\r\n                                strSE +\r\n      " +
            "                          BatchNorm(C + 2, In(\"C\", C + 2)));\r\n\r\n                " +
            "            C += 3;\r\n                        }\r\n\r\n                        for (v" +
            "ar i = 1ul; i < p.Iterations; i++)\r\n                        {\r\n                 " +
            "           var strOutputLayer = (i == 1 && g > 1) ? In(\"B\", C - 1) : (i == 1 && " +
            "g == 1) ? \"B4\" : In(\"A\", A);\r\n\r\n                            var group = In(\"SE\"," +
            " C + 1);\r\n\r\n                            var strSE =\r\n                           " +
            "     p.SqueezeExcitation ? GlobalAvgPooling(In(\"B\", C + 1), group) +\r\n          " +
            "                      Convolution(1, group + \"GAP\", DIV8((6 * W) / 4), 1, 1, 1, " +
            "1, 0, 0, group) +\r\n                                BatchNormHardSwish(1, group +" +
            " \"C1\", group) +\r\n                                Convolution(2, group + \"B1\", DI" +
            "V8(6 * W), 1, 1, 1, 1, 0, 0, group) +\r\n                                BatchNorm" +
            "HardLogistic(2, group + \"C2\", group) +\r\n                                ChannelM" +
            "ultiply(In(\"B\", C + 1) + \",\" + group + \"B2\", group) +\r\n                         " +
            "       Convolution(C + 2, group + \"CM\", DIV8(W), 1, 1, 1, 1, 0, 0) :\r\n          " +
            "                      Convolution(C + 2, In(\"B\", C + 1), DIV8(W), 1, 1, 1, 1, 0," +
            " 0);\r\n\r\n                            blocks.Add(\r\n                               " +
            " Convolution(C, strOutputLayer, DIV8(6 * W), 1, 1, 1, 1, 0, 0) +\r\n              " +
            "                  BatchNormHardSwish(C, In(\"C\", C)) +\r\n                         " +
            "       DepthwiseMixedConvolution(g, C + 1, In(\"B\", C), 1, 1, channelsplit) +\r\n  " +
            "                              BatchNormHardSwish(C + 1, In(\"DC\", C + 1)) +\r\n    " +
            "                            strSE +\r\n                                BatchNorm(C" +
            " + 2, In(\"C\", C + 2)) +\r\n                                Add(A + 1, In(\"B\", C + " +
            "2) + \",\" + strOutputLayer));\r\n\r\n                            A++;\r\n              " +
            "              C += 3;\r\n                        }\r\n                    }\r\n\r\n     " +
            "               foreach (var block in blocks)\r\n                        net += blo" +
            "ck;\r\n\r\n                    net +=\r\n                        BatchNormHardSwish(C," +
            " In(\"A\", A)) +\r\n                        Convolution(C, In(\"B\", C), p.Classes, 1," +
            " 1, 1, 1, 0, 0) +\r\n                        BatchNorm(C + 1, In(\"C\", C)) +\r\n     " +
            "                   GlobalAvgPooling(In(\"B\", C + 1)) +\r\n                        \"" +
            "[ACT]\" + nwl + \"Type=Activation\" + nwl + \"Inputs=GAP\" + nwl + \"Activation=Softma" +
            "x\" + nwl + nwl +\r\n                        \"[Cost]\" + nwl + \"Type=Cost\" + nwl + \"" +
            "Inputs=ACT\" + nwl + \"Cost=CategoricalCrossEntropy\" + nwl + \"Channels=\" + to_stri" +
            "ng(p.Classes);\r\n                }\r\n                break;\r\n\r\n            case Sc" +
            "ripts.resnet:\r\n                {\r\n                    var bn = p.Bottleneck ? 1u" +
            "l : 0ul;\r\n                    const Float K = 2;\r\n                    var W = p." +
            "Width * 16;\r\n                    var A = 1ul;\r\n                    var C = 5ul;\r" +
            "\n\r\n                    net += Convolution(1, \"Input\", DIV8(W), 3, 3, 1, 1, 1, 1)" +
            ";\r\n\r\n                    if (p.Bottleneck)\r\n                    {\r\n             " +
            "           blocks.Add(\r\n                            BatchNormRelu(1, \"C1\") +\r\n  " +
            "                          Convolution(2, \"B1\", DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n   " +
            "                         BatchNormRelu(2, \"C2\") +\r\n                            C" +
            "onvolution(3, \"B2\", DIV8((size_t)(K * W / 4)), 3, 3, 1, 1, 1, 1) +\r\n            " +
            "                (p.Dropout > 0 ? BatchNormReluDropout(3, \"C3\") : BatchNormRelu(3" +
            ", \"C3\")) +\r\n                            Convolution(4, \"B3\", DIV8(W), 1, 1, 1, 1" +
            ", 0, 0) +\r\n                            Convolution(5, \"B1\", DIV8(W), 1, 1, 1, 1," +
            " 0, 0) +\r\n                            Add(1, \"C4,C5\"));\r\n\r\n                     " +
            "   C = 6;\r\n                    }\r\n                    else\r\n                    " +
            "{\r\n                        blocks.Add(\r\n                            BatchNormRel" +
            "u(1, \"C1\") +\r\n                            Convolution(2, \"B1\", DIV8(W), 3, 3, 1," +
            " 1, 1, 1) +\r\n                            (p.Dropout > 0 ? BatchNormReluDropout(2" +
            ", \"C2\") : BatchNormRelu(2, \"C2\")) +\r\n                            Convolution(3, " +
            "\"B2\", DIV8(W), 3, 3, 1, 1, 1, 1) +\r\n                            Convolution(4, \"" +
            "B1\", DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                            Add(1, \"C3,C4\"));" +
            "\r\n                    }\r\n\r\n                    for (var g = 0ul; g < p.Groups; g" +
            "++)  // 32*32 16*16 8*8 or 28*28 14*14 7*7\r\n                    {\r\n             " +
            "           if (g > 0)\r\n                        {\r\n                            W " +
            "*= 2;\r\n\r\n                            var strChannelZeroPad = p.ChannelZeroPad ?\r" +
            "\n                                (\"[AVG\" + to_string(g) + \"]\" + nwl + \"Type=AvgP" +
            "ooling\" + nwl + \"Inputs=A\" + to_string(A) + nwl + \"Kernel=3,3\" + nwl + \"Stride=2" +
            ",2\" + nwl + \"Pad=1,1\" + nwl + nwl +\r\n                                \"[CZP\" + to" +
            "_string(g) + \"]\" + nwl + \"Type=ChannelZeroPad\" + nwl + \"Inputs=AVG\" + to_string(" +
            "g) + nwl + \"Channels=\" + to_string(W) + nwl + nwl +\r\n                           " +
            "     Add(A + 1, In(\"C\", C + 1 + bn) + \",\" + In(\"CZP\", g))) :\r\n                  " +
            "              (Convolution(C + 2 + bn, In(\"B\", C), DIV8(W), 1, 1, 2, 2, 0, 0) +\r" +
            "\n                                Add(A + 1, In(\"C\", C + 1 + bn) + \",\" + In(\"C\", " +
            "C + 2 + bn)));\r\n\r\n                            if (p.Bottleneck)\r\n               " +
            "             {\r\n\r\n                                blocks.Add(\r\n                 " +
            "                   BatchNormRelu(C, In(\"A\", A)) +\r\n                             " +
            "       Convolution(C, In(\"B\", C), DIV8(W), 1, 1, 2, 2, 0, 0) +\r\n                " +
            "                    BatchNormRelu(C + 1, In(\"C\", C)) +\r\n                        " +
            "            Convolution(C + 1, In(\"B\", C + 1), DIV8((size_t)(K * W / 4)), 3, 3, " +
            "1, 1, 1, 1) +\r\n                                    (p.Dropout > 0 ? BatchNormRel" +
            "uDropout(C + 2, In(\"C\", C + 1)) : BatchNormRelu(C + 2, In(\"C\", C + 1))) +\r\n     " +
            "                               Convolution(C + 2, In(\"B\", C + 2), DIV8(W), 1, 1," +
            " 1, 1, 0, 0) +\r\n                                    strChannelZeroPad);\r\n       " +
            "                     }\r\n                            else\r\n                      " +
            "      {\r\n                                blocks.Add(\r\n                          " +
            "          BatchNormRelu(C, In(\"A\", A)) +\r\n                                    Co" +
            "nvolution(C, In(\"B\", C), DIV8(W), 3, 3, 2, 2, 1, 1) +\r\n                         " +
            "           (p.Dropout > 0 ? BatchNormReluDropout(C + 1, In(\"C\", C)) : BatchNormR" +
            "elu(C + 1, In(\"C\", C))) +\r\n                                    Convolution(C + 1" +
            ", In(\"B\", C + 1), DIV8(W), 3, 3, 1, 1, 1, 1) +\r\n                                " +
            "    strChannelZeroPad);\r\n                            }\r\n\r\n                      " +
            "      A++;\r\n                            if (p.ChannelZeroPad)\r\n                 " +
            "               C += 2 + bn;\r\n                            else\r\n                 " +
            "               C += 3 + bn;\r\n                        }\r\n\r\n                      " +
            "  for (var i = 1u; i < p.Iterations; i++)\r\n                        {\r\n          " +
            "                  if (p.Bottleneck)\r\n                            {\r\n            " +
            "                    blocks.Add(\r\n                                    BatchNormRe" +
            "lu(C, In(\"A\", A)) +\r\n                                    Convolution(C, In(\"B\", " +
            "C), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                                    BatchNormR" +
            "elu(C + 1, In(\"C\", C)) +\r\n                                    Convolution(C + 1," +
            " In(\"B\", C + 1), DIV8((size_t)(K * W / 4)), 3, 3, 1, 1, 1, 1) +\r\n               " +
            "                     (p.Dropout > 0 ? BatchNormReluDropout(C + 2, In(\"C\", C + 1)" +
            ") : BatchNormRelu(C + 2, In(\"C\", C + 1))) +\r\n                                   " +
            " Convolution(C + 2, In(\"B\", C + 2), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n              " +
            "                      Add(A + 1, In(\"C\", C + 2) + \",\" + In(\"A\", A)));\r\n         " +
            "                   }\r\n                            else\r\n                        " +
            "    {\r\n                                blocks.Add(\r\n                            " +
            "        BatchNormRelu(C, In(\"A\", A)) +\r\n                                    Conv" +
            "olution(C, In(\"B\", C), DIV8(W), 3, 3, 1, 1, 1, 1) +\r\n                           " +
            "         (p.Dropout > 0 ? BatchNormReluDropout(C + 1, In(\"C\", C)) : BatchNormRel" +
            "u(C + 1, In(\"C\", C))) +\r\n                                    Convolution(C + 1, " +
            "In(\"B\", C + 1), DIV8(W), 3, 3, 1, 1, 1, 1) +\r\n                                  " +
            "  Add(A + 1, In(\"C\", C + 1) + \",\" + In(\"A\", A)));\r\n                            }" +
            "\r\n\r\n                            A++; C += 2 + bn;\r\n                        }\r\n  " +
            "                  }\r\n\r\n                    foreach (var block in blocks)\r\n      " +
            "                  net += block;\r\n\r\n                    net +=\r\n                 " +
            "       BatchNormRelu(C, In(\"A\", A)) +\r\n                        Convolution(C, In" +
            "(\"B\", C), p.Classes, 1, 1, 1, 1, 0, 0) +\r\n                        BatchNorm(C + " +
            "1, In(\"C\", C)) +\r\n                        GlobalAvgPooling(In(\"B\", C + 1)) +\r\n  " +
            "                      \"[ACT]\" + nwl + \"Type=Activation\" + nwl + \"Inputs=GAP\" + n" +
            "wl + \"Activation=Softmax\" + nwl + nwl +\r\n                        \"[Cost]\" + nwl " +
            "+ \"Type=Cost\" + nwl + \"Inputs=ACT\" + nwl + \"Cost=CategoricalCrossEntropy\" + nwl " +
            "+ \"Channels=\" + to_string(p.Classes);\r\n                }\r\n                break;" +
            "\r\n\r\n            case Scripts.shufflenetv2:\r\n                {\r\n                 " +
            "   const bool channelsplit = true;\r\n                    var W = p.Width * 16;\r\n\r" +
            "\n                    net += Convolution(1, \"Input\", DIV8(W), 3, 3, 1, 1, 1, 1);\r" +
            "\n\r\n                    blocks.Add(\r\n                        BatchNormRelu(1, \"C1" +
            "\") +\r\n                        Convolution(2, \"B1\", DIV8(W), 1, 1, 1, 1, 0, 0) +\r" +
            "\n                        BatchNormRelu(2, \"C2\") +\r\n                        Depth" +
            "wiseConvolution(3, \"B2\") +\r\n                        BatchNorm(3, \"DC3\") +\r\n     " +
            "                   Convolution(4, \"B3\", DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n          " +
            "              BatchNormRelu(4, \"C4\") +\r\n                        Convolution(5, \"" +
            "B1\", DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                        Concat(1, \"C5,B4\"));\r" +
            "\n\r\n                    var C = 6ul;\r\n                    var A = 1ul;\r\n\r\n       " +
            "             for (var g = 1ul; g <= p.Groups; g++)  // 32*32 16*16 8*8 or 28*28 " +
            "14*14 7*7\r\n                    {\r\n                        if (g > 1)\r\n          " +
            "              {\r\n                            W *= 2;\r\n\r\n                        " +
            "    blocks.Add(\r\n                                Convolution(C, In(\"CC\", A), DIV" +
            "8(W), 1, 1, 1, 1, 0, 0) +\r\n                                BatchNormRelu(C + 1, " +
            "In(\"C\", C)) +\r\n                                DepthwiseMixedConvolution(0, C + " +
            "1, In(\"B\", C + 1), 2, 2, channelsplit) +\r\n                                BatchN" +
            "orm(C + 2, In(\"DC\", C + 1)) +\r\n                                Convolution(C + 2" +
            ", In(\"B\", C + 2), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                                " +
            "BatchNormRelu(C + 3, In(\"C\", C + 2)) +\r\n                                Depthwis" +
            "eMixedConvolution(0, C + 3, In(\"CC\", A), 2, 2, channelsplit) +\r\n                " +
            "                BatchNorm(C + 4, In(\"DC\", C + 3)) +\r\n                           " +
            "     Convolution(C + 4, In(\"B\", C + 4), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n          " +
            "                      BatchNormRelu(C + 5, In(\"C\", C + 4)) +\r\n                  " +
            "              Concat(A + 1, In(\"B\", C + 5) + \",\" + In(\"B\", C + 3)));\r\n\r\n        " +
            "                    A++; C += 5;\r\n                        }\r\n\r\n                 " +
            "       for (var i = 1ul; i < p.Iterations; i++)\r\n                        {\r\n    " +
            "                        blocks.Add(\r\n                                ChannelShuf" +
            "fle(A, In(\"CC\", A), 2) +\r\n                                ChannelSplit(A, In(\"CS" +
            "H\", A), 2, 1, \"L\") + ChannelSplit(A, In(\"CSH\", A), 2, 2, \"R\") +\r\n               " +
            "                 Convolution(C, In(\"RCS\", A), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n    " +
            "                            BatchNormRelu(C + 1, In(\"C\", C)) +\r\n                " +
            "                DepthwiseMixedConvolution(0, C + 1, In(\"B\", C + 1), 1, 1, channe" +
            "lsplit) +\r\n                                BatchNorm(C + 2, In(\"DC\", C + 1)) +\r\n" +
            "                                Convolution(C + 2, In(\"B\", C + 2), DIV8(W), 1, 1" +
            ", 1, 1, 0, 0) +\r\n                                BatchNormRelu(C + 3, In(\"C\", C " +
            "+ 2)) +\r\n                                Concat(A + 1, In(\"LCS\", A) + \",\" + In(\"" +
            "B\", C + 3)));\r\n\r\n                            A++; C += 3;\r\n                     " +
            "   }\r\n                    }\r\n\r\n                    foreach (var block in blocks)" +
            "\r\n                        net += block;\r\n\r\n                    net +=\r\n         " +
            "               Convolution(C, In(\"CC\", A), p.Classes, 1, 1, 1, 1, 0, 0) +\r\n     " +
            "                   BatchNorm(C + 1, In(\"C\", C)) +\r\n                        Globa" +
            "lAvgPooling(In(\"B\", C + 1)) +\r\n                        \"[ACT]\" + nwl + \"Type=Act" +
            "ivation\" + nwl + \"Inputs=GAP\" + nwl + \"Activation=Softmax\" + nwl + nwl +\r\n      " +
            "                  \"[Cost]\" + nwl + \"Type=Cost\" + nwl + \"Inputs=ACT\" + nwl + \"Cos" +
            "t=CategoricalCrossEntropy\" + nwl + \"Channels=\" + to_string(p.Classes);\r\n        " +
            "        }\r\n                break;\r\n        }\r\n\r\n        return net;\r\n    }\r\n}\r\n}" +
            "")]
        public string Script {
            get {
                return ((string)(this["Script"]));
            }
            set {
                this["Script"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("840")]
        public global::System.Windows.GridLength EditSplitPositionB {
            get {
                return ((global::System.Windows.GridLength)(this["EditSplitPositionB"]));
            }
            set {
                this["EditSplitPositionB"] = value;
            }
        }
    }
}
