# This is the CMakeCache file.
# For build in directory: c:/Users/dhaen/source/repos/convnet/dnn/deps/oneDNN2/build
# It was generated by CMake: C:/Program Files/CMake/bin/cmake.exe
# You can edit this file to change values found and used by cmake.
# If you do not want to change any of the values, simply exit the editor.
# If you do want to change a value, simply edit, save, and exit the editor.
# The syntax for the file is as follows:
# KEY:TYPE=VALUE
# KEY is the name of a variable in the cache.
# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT TYPE!.
# VALUE is the current value for the KEY.

########################
# EXTERNAL cache entries
########################

//enables rdpms counter to report precise cpu frequency in benchdnn.
//\n    CAUTION: may not work on all cpus (hence disabled by default)
BENCHDNN_USE_RDPMC:BOOL=OFF

//Path to a program.
CMAKE_AR:FILEPATH=C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30705/bin/Hostx64/x64/lib.exe

//Choose the type of build, options are: None Debug Release RelWithDebInfo
// MinSizeRel RelWithAssert RelWithMDd...
CMAKE_BUILD_TYPE:STRING=Release

//Semicolon separated list of supported configuration types, only
// supports Debug, Release, MinSizeRel, and RelWithDebInfo, anything
// else will be ignored.
CMAKE_CONFIGURATION_TYPES:STRING=Debug;Release;

//Flags used by the CXX compiler during all build types.
CMAKE_CXX_FLAGS:STRING=/DWIN32 /D_WINDOWS /W3 /GR /EHsc

//Flags used by the CXX compiler during DEBUG builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=/MDd /Zi /Ob0 /Od /RTC1

//Flags used by the CXX compiler during MINSIZEREL builds.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=/MD /O1 /Ob1 /DNDEBUG

//Flags used by the CXX compiler during RELEASE builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=/MD /O2 /Ob2 /DNDEBUG

//Flags used by the C++ compiler during RelWithAssert builds.
CMAKE_CXX_FLAGS_RELWITHASSERT:STRING='/MD /O2 /Ob2 '

//Flags used by the CXX compiler during RELWITHDEBINFO builds.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=/MD /Zi /O2 /Ob1 /DNDEBUG

//Flags used by the C++ compiler during RelWithMdd build.
CMAKE_CXX_FLAGS_RELWITHMDD:STRING=/MD /O2 /Ob2 /D_DEBUG

//Libraries linked by default with all C++ applications.
CMAKE_CXX_STANDARD_LIBRARIES:STRING=kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib

//Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=/DWIN32 /D_WINDOWS /W3

//Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=/MDd /Zi /Ob0 /Od /RTC1

//Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=/MD /O1 /Ob1 /DNDEBUG

//Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=/MD /O2 /Ob2 /DNDEBUG

//Flags used by the C compiler during RelWithAssert builds.
CMAKE_C_FLAGS_RELWITHASSERT:STRING='/MD /O2 /Ob2 '

//Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=/MD /Zi /O2 /Ob1 /DNDEBUG

//Flags used by the C compiler during RelWithMdd build
CMAKE_C_FLAGS_RELWITHMDD:STRING=/MD /O2 /Ob2 /D_DEBUG

//Libraries linked by default with all C applications.
CMAKE_C_STANDARD_LIBRARIES:STRING=kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib

//Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

//Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

//Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

//Flags used for linking binaries during RelWithAssert builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHASSERT:STRING=/INCREMENTAL:NO

//Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

//Flags used for linking binaries during RelWithMdd builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHMDD:STRING=/INCREMENTAL:NO

//User executables (bin)
CMAKE_INSTALL_BINDIR:PATH=bin

//Read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_DATADIR:PATH=

//Read-only architecture-independent data root (share)
CMAKE_INSTALL_DATAROOTDIR:PATH=share

//Documentation root (DATAROOTDIR/doc/PROJECT_NAME)
CMAKE_INSTALL_DOCDIR:PATH=

//C header files (include)
CMAKE_INSTALL_INCLUDEDIR:PATH=include

//Info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_INFODIR:PATH=

//Object code libraries (lib)
CMAKE_INSTALL_LIBDIR:PATH=lib

//Program executables (libexec)
CMAKE_INSTALL_LIBEXECDIR:PATH=libexec

//Locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_LOCALEDIR:PATH=

//Modifiable single-machine data (var)
CMAKE_INSTALL_LOCALSTATEDIR:PATH=var

//Man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_MANDIR:PATH=

//C header files for non-gcc (/usr/include)
CMAKE_INSTALL_OLDINCLUDEDIR:PATH=/usr/include

//Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=C:/Program Files (x86)/oneDNN

//Run-time variable data (LOCALSTATEDIR/run)
CMAKE_INSTALL_RUNSTATEDIR:PATH=

//System admin executables (sbin)
CMAKE_INSTALL_SBINDIR:PATH=sbin

//Modifiable architecture-independent data (com)
CMAKE_INSTALL_SHAREDSTATEDIR:PATH=com

//Read-only single-machine data (etc)
CMAKE_INSTALL_SYSCONFDIR:PATH=etc

//Path to a program.
CMAKE_LINKER:FILEPATH=C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30705/bin/Hostx64/x64/link.exe

//Flags used by the linker during the creation of modules during
// all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during the creation of modules during
// DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

//Flags used by the linker during the creation of modules during
// MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

//Flags used by the linker during the creation of modules during
// RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

//Flags used by the linker during the creation of modules during
// RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

//Path to a program.
CMAKE_MT:FILEPATH=CMAKE_MT-NOTFOUND

//Value Computed by CMake
CMAKE_PROJECT_DESCRIPTION:STATIC=

//Value Computed by CMake
CMAKE_PROJECT_HOMEPAGE_URL:STATIC=

//Value Computed by CMake
CMAKE_PROJECT_NAME:STATIC=oneDNN

//Value Computed by CMake
CMAKE_PROJECT_VERSION:STATIC=2.5.0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_MAJOR:STATIC=2

//Value Computed by CMake
CMAKE_PROJECT_VERSION_MINOR:STATIC=5

//Value Computed by CMake
CMAKE_PROJECT_VERSION_PATCH:STATIC=0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_TWEAK:STATIC=

//RC compiler
CMAKE_RC_COMPILER:FILEPATH=rc

//Flags for Windows Resource Compiler during all build types.
CMAKE_RC_FLAGS:STRING=-DWIN32

//Flags for Windows Resource Compiler during DEBUG builds.
CMAKE_RC_FLAGS_DEBUG:STRING=-D_DEBUG

//Flags for Windows Resource Compiler during MINSIZEREL builds.
CMAKE_RC_FLAGS_MINSIZEREL:STRING=

//Flags for Windows Resource Compiler during RELEASE builds.
CMAKE_RC_FLAGS_RELEASE:STRING=

//Flags for Windows Resource Compiler during RELWITHDEBINFO builds.
CMAKE_RC_FLAGS_RELWITHDEBINFO:STRING=

//Flags used by the linker during the creation of shared libraries
// during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during the creation of shared libraries
// during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

//Flags used by the linker during the creation of shared libraries
// during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

//Flags used by the linker during the creation of shared libraries
// during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

//Flags used by the shared libraries linker during RelWithAssert
// builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHASSERT:STRING=/INCREMENTAL:NO

//Flags used by the linker during the creation of shared libraries
// during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

//Flags used by the shared libraries linker during RelWithMdd builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHMDD:STRING=/INCREMENTAL:NO

//If set, runtime paths are not added when installing shared libraries,
// but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=OFF

//If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=OFF

//Flags used by the linker during the creation of static libraries
// during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during the creation of static libraries
// during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of static libraries
// during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of static libraries
// during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of static libraries
// during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//If this value is on, makefiles will be generated without the
// .SILENT directive, and all commands will be echoed to the console
// during the make.  This is useful for debugging only. With Visual
// Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=OFF

//Enables use of AArch64 optimised functions
//\n    from Arm Compute Library.
//\n    This is only supported on AArch64 builds and assumes there
// is a
//\n    functioning Compute Library build available at the location
// specified by the
//\n    environment variable ACL_ROOT_DIR.
DNNL_AARCH64_USE_ACL:BOOL=OFF

//specifies compiler optimization flags (see below for more information).
//\n    If empty default optimization level would be applied which
// depends on the
//\n    compiler being used.
//\n
//\n    - For Intel C++ Compilers the default option is `-xSSE4.1`
// which instructs
//\n      the compiler to generate the code for the processors that
// support SSE4.1
//\n      instructions. This option would not allow to run the library
// on older
//\n      architectures.
//\n
//\n    - For GNU* Compiler Collection and Clang, the default option
// is `-msse4.1` which
//\n      behaves similarly to the description above.
//\n
//\n    - For all other cases there are no special optimizations
// flags.
//\n
//\n    If the library is to be built for generic architecture (e.g.
// built by a
//\n    Linux distributive maintainer) one may want to specify DNNL_ARCH_OPT_FLAGS=""
//\n    to not use any host specific instructions
DNNL_ARCH_OPT_FLAGS:STRING=HostOpts

//Use an external BLAS library. Valid values:
//\n      - NONE (default)
//\n        Use in-house implementation.
//\n      - MKL
//\n        Intel Math Kernel Library (Intel MKL)
//\n        (https://software.intel.com/content/www/us/en/develop/tools/math-kernel-library.html)
//\n      - OPENBLAS
//\n        (https://www.openblas.net)
//\n      - ARMPL
//\n        Arm Performance Libraries
//\n        (https://developer.arm.com/tools-and-software/server-and-hpc/downloads/arm-performance-libraries)
//\n      - ANY
//\n        FindBLAS will search default library paths for a known
// BLAS installation.
DNNL_BLAS_VENDOR:STRING=NONE

//builds examples
DNNL_BUILD_EXAMPLES:BOOL=OFF

//specifies whether oneDNN library will use special testing environment
// for
//\n    internal testing processes
DNNL_BUILD_FOR_CI:BOOL=OFF

//builds tests
DNNL_BUILD_TESTS:BOOL=OFF

//specifies which supported tool for code coverage will be used
//\n    Currently only gcov supported
DNNL_CODE_COVERAGE:STRING=OFF

//specifies the threading runtime for CPU engines;
//\n    supports OMP (default), TBB or DPCPP (DPC++ CPU engines).
//\n
//\n    To use Threading Building Blocks (TBB) one should also
//\n    set TBBROOT (either environment variable or CMake option)
// to the library
//\n    location.
DNNL_CPU_RUNTIME:STRING=OMP

//specifies host compiler for Intel oneAPI DPC++ Compiler
DNNL_DPCPP_HOST_COMPILER:STRING=DEFAULT

//disables sharing a common scratchpad between primitives.
//\n    This option must be turned ON if there is a possibility
// of executing
//\n    distinct primitives concurrently.
//\n    CAUTION: enabling this option increases memory consumption.
DNNL_ENABLE_CONCURRENT_EXEC:BOOL=OFF

//enables control of CPU ISA specific hints by oneDNN via DNNL_CPU_ISA_HINTS
//\n    environment variable and dnnl_set_cpu_isa_hints() function
DNNL_ENABLE_CPU_ISA_HINTS:BOOL=ON

//Enable ITT Tasks tagging feature and tag all primitive execution
// 
//\n    (on by default). VTune Amplifier can group profiling results
// based 
//\n    on those ITT tasks and show corresponding timeline information.
DNNL_ENABLE_ITT_TASKS:BOOL=OFF

//Enable registration of oneDNN kernels that are generated at
//\n    runtime with VTune Amplifier (on by default). Without the
//\n    registrations, VTune Amplifier would report data collected
// inside
//\n    the kernels as `outside any known module`.
DNNL_ENABLE_JIT_PROFILING:BOOL=OFF

//enables control of CPU ISA detected by oneDNN via DNNL_MAX_CPU_ISA
//\n    environment variable and dnnl_set_max_cpu_isa() function
DNNL_ENABLE_MAX_CPU_ISA:BOOL=ON

//enables memory-related debug functionality,
//\n    such as buffer overflow (default) and underflow, using gtests
// and benchdnn.
//\n    Additionaly, this option enables testing of out-of-memory
// handling by the
//\n    library, such as failed memory allocations, using primitive-related
// gtests.
//\n    This feature is experimental and is only available on Linux.
DNNL_ENABLE_MEM_DEBUG:BOOL=ON

//Specifies a set of primitives to be available at build time.
// Valid values:
//\n    - ALL (the default). Includes all primitives to be enabled.
//\n    - <PRIMITIVE_NAME>. Includes only the selected primitive
// to be enabled.
//\n      Possible values are: BATCH_NORMALIZATION, BINARY, CONCAT,
// CONVOLUTION,
//\n      DECONVOLUTION, ELTWISE, INNER_PRODUCT, LAYER_NORMALIZATION,
// LRN, MATMUL,
//\n      POOLING, PRELU, REDUCTION, REORDER, RESAMPLING, RNN, SHUFFLE,
// SOFTMAX,
//\n      SUM.
//\n    - <PRIMITIVE_NAME>;<PRIMITIVE_NAME>;... Includes only selected
// primitives to
//\n      be enabled at build time. This is treated as CMake string,
// thus, semicolon
//\n      is a mandatory delimiter between names. This is the way
// to specify several
//\n      primitives to be available in the final binary.
DNNL_ENABLE_PRIMITIVE:STRING=ALL

//enables primitive cache.
DNNL_ENABLE_PRIMITIVE_CACHE:BOOL=ON

//Specifies a set of implementations using specific CPU ISA to
// be available
//\n    at build time. Regardless of value chosen, compiler-based
// optimized
//\n    implementations will always be available. Valid values:
//\n    - ALL (the default). Includes all ISA to be enabled.
//\n    - <ISA_NAME>. Includes selected and all "less" ISA to be
// enabled.
//\n      Possible values are: SSE41, AVX2, AVX512, AMX. The linear
// order is
//\n      SSE41 < AVX2 < AVX512 < AMX. It means that if user selects,
// e.g. AVX2 ISA,
//\n      SSE41 implementations will also be available at build
// time.
DNNL_ENABLE_PRIMITIVE_CPU_ISA:STRING=AVX2

//Specifies a set of implementations using specific GPU ISA to
// be available
//\n    at build time. Regardless of value chosen, reference OpenCL-based
//\n    implementations will always be available. Valid values:
//\n    - ALL (the default). Includes all ISA to be enabled.
//\n    - <ISA_NAME>;<ISA_NAME>;... Includes only selected ISA to
// be enabled.
//\n      Possible values are: GEN9, GEN11, XELP, XEHP, XEHPG, XEHPC.
DNNL_ENABLE_PRIMITIVE_GPU_ISA:STRING=ALL

//enables stack checker that can be used to get
//\n    information about stack consumption for a particular library
// entry point.
//\n    This feature is only available on Linux (see src/common/stack_checker.hpp
//\n    for more details).
//\n    Note: This option requires enabling concurrent scratchpad
//\n    (DNNL_ENABLE_CONCURRENT_EXEC).
DNNL_ENABLE_STACK_CHECKER:BOOL=OFF

//Specifies a set of functionality to be available at build time.
// Designed to
//\n    decrease the final memory disk footprint of the shared object
// or application
//\n    statically linked against the library. Valid values:
//\n    - TRAINING (the default). Includes all functionality to
// be enabled.
//\n    - INFERENCE. Includes only forward propagation kind functionality
// and their
//\n      dependencies.
DNNL_ENABLE_WORKLOAD:STRING=TRAINING

//specifies the runtime to use for GPU engines.
//\n    Can be NONE (default; no GPU engines), OCL (OpenCL GPU engines)
//\n    or DPCPP (DPC++ GPU engines).
//\n
//\n    Using OpenCL for GPU requires setting OPENCLROOT if the
// libraries are
//\n    installed in a non-standard location.
DNNL_GPU_RUNTIME:STRING=NONE

//specifies target GPU vendor for GPU engines.
//\n    Can be INTEL (default) or NVIDIA.
DNNL_GPU_VENDOR:STRING=INTEL

//specifies installation mode; supports DEFAULT or BUNDLE.
//\n
//\n    When BUNDLE option is set oneDNN will be installed as a
// bundle
//\n    which contains examples and benchdnn.
DNNL_INSTALL_MODE:STRING=DEFAULT

//specifies name of the library. For example, user can use this
// variable to
//\n     specify a custom library names for CPU and GPU configurations
// to safely
//\n     include them into their CMake project via add_subdirectory
DNNL_LIBRARY_NAME:STRING=dnnl

//specifies whether oneDNN library should be SHARED or STATIC
DNNL_LIBRARY_TYPE:STRING=SHARED

//specifies testing targets coverage. Supports CI, CI_NO_CORR,
// NIGHTLY.
//\n
//\n    When CI option is set, it enables a subset of test targets
// to run. When
//\n    CI_NO_CORR option is set, it enables same coverage as for
// CI option, but
//\n    switches off correctness validation for benchdnn targets.
// When NIGHTLY
//\n    option is set, it enables a broader set of test targets
// to run.
DNNL_TEST_SET:STRING=CI

//instructs build system to use a Clang sanitizer. Possible values:
//\n    Address: enables AddressSanitizer
//\n    Leak: enables LeakSanitizer
//\n    Memory: enables MemorySanitizer
//\n    MemoryWithOrigin: enables MemorySanitizer with origin tracking
//\n    Thread: enables ThreadSanitizer
//\n    Undefined: enables UndefinedBehaviourSanitizer
//\n    This feature is experimental and is only available on Linux.
DNNL_USE_CLANG_SANITIZER:STRING=

//Instructs build system to use clang-tidy. Valid values:
//\n    - NONE (default)
//\n      Clang-tidy is disabled.
//\n    - CHECK
//\n      Enables checks from .clang-tidy.
//\n    - FIX
//\n      Enables checks from .clang-tidy and fix found issues.
//\n    This feature is only available on Linux.
DNNL_USE_CLANG_TIDY:STRING=NONE

//If DNNL_ENABLE_PRIMITIVE_CACHE
//\n    is ON enables using runtime objects in the primitive cache
DNNL_USE_RT_OBJECTS_IN_PRIMITIVE_CACHE:BOOL=ON

//allows oneDNN be verbose whenever DNNL_VERBOSE
//\n    environment variable set to 1
DNNL_VERBOSE:BOOL=ON

//treat warnings as errors
DNNL_WERROR:BOOL=OFF

//Dot tool for use with Doxygen
DOXYGEN_DOT_EXECUTABLE:FILEPATH=C:/Program Files/Graphviz/bin/dot.exe

//Doxygen documentation generation tool (http://www.doxygen.org)
DOXYGEN_EXECUTABLE:FILEPATH=C:/Program Files/doxygen/bin/doxygen.exe

//Path to a program.
DOXYREST_EXECUTABLE:FILEPATH=C:/doxyrest-2.1.3-windows-amd64/bin/doxyrest.exe

//Git command line client
GIT_EXECUTABLE:FILEPATH=C:/Program Files/Git/cmd/git.exe

//path to Intel SDK for OpenCL applications.
//\n    Use this option to specify custom location for OpenCL.
OPENCLROOT:STRING=

//CXX compiler flags for OpenMP parallelization
OpenMP_CXX_FLAGS:STRING=-openmp

//CXX compiler libraries for OpenMP parallelization
OpenMP_CXX_LIB_NAMES:STRING=

//C compiler flags for OpenMP parallelization
OpenMP_C_FLAGS:STRING=-openmp

//C compiler libraries for OpenMP parallelization
OpenMP_C_LIB_NAMES:STRING=

//Path to a program.
PYTHON_EXECUTABLE:FILEPATH=C:/Python39/python.exe

//Path to a program.
SPHINX_EXECUTABLE:FILEPATH=C:/Python39/Scripts/sphinx-build.exe

//specifies generator for Sphinx
SPHINX_GENERATOR:STRING=html

//path to Thread Building Blocks (TBB).
//\n    Use this option to specify TBB installation locaton.
TBBROOT:STRING=

//specifies which threadpool implementation to use when
//\n    DNNL_CPU_RUNTIME=THREADPOOL is selected. Valid values: STANDALONE,
// EIGEN,
//\n    TBB
_DNNL_TEST_THREADPOOL_IMPL:STRING=STANDALONE

//Value Computed by CMake
oneDNN_BINARY_DIR:STATIC=C:/Users/dhaen/source/repos/convnet/dnn/deps/oneDNN2/build

//Value Computed by CMake
oneDNN_IS_TOP_LEVEL:STATIC=ON

//Value Computed by CMake
oneDNN_SOURCE_DIR:STATIC=C:/Users/dhaen/source/repos/convnet/dnn/deps/oneDNN


########################
# INTERNAL cache entries
########################

//ADVANCED property for variable: CMAKE_AR
CMAKE_AR-ADVANCED:INTERNAL=1
//This is the directory where this CMakeCache.txt was created
CMAKE_CACHEFILE_DIR:INTERNAL=c:/Users/dhaen/source/repos/convnet/dnn/deps/oneDNN2/build
//Major version of cmake used to create the current loaded cache
CMAKE_CACHE_MAJOR_VERSION:INTERNAL=3
//Minor version of cmake used to create the current loaded cache
CMAKE_CACHE_MINOR_VERSION:INTERNAL=22
//Patch version of cmake used to create the current loaded cache
CMAKE_CACHE_PATCH_VERSION:INTERNAL=0
//Path to CMake executable.
CMAKE_COMMAND:INTERNAL=C:/Program Files/CMake/bin/cmake.exe
//Path to cpack program executable.
CMAKE_CPACK_COMMAND:INTERNAL=C:/Program Files/CMake/bin/cpack.exe
//Path to ctest program executable.
CMAKE_CTEST_COMMAND:INTERNAL=C:/Program Files/CMake/bin/ctest.exe
//ADVANCED property for variable: CMAKE_CXX_FLAGS
CMAKE_CXX_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_DEBUG
CMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_MINSIZEREL
CMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELEASE
CMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHASSERT
CMAKE_CXX_FLAGS_RELWITHASSERT-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHDEBINFO
CMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHMDD
CMAKE_CXX_FLAGS_RELWITHMDD-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_STANDARD_LIBRARIES
CMAKE_CXX_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS
CMAKE_C_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG
CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL
CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE
CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHASSERT
CMAKE_C_FLAGS_RELWITHASSERT-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO
CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHMDD
CMAKE_C_FLAGS_RELWITHMDD-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_STANDARD_LIBRARIES
CMAKE_C_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//Executable file format
CMAKE_EXECUTABLE_FORMAT:INTERNAL=Unknown
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS
CMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG
CMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE
CMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHASSERT
CMAKE_EXE_LINKER_FLAGS_RELWITHASSERT-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHMDD
CMAKE_EXE_LINKER_FLAGS_RELWITHMDD-ADVANCED:INTERNAL=1
//Name of external makefile project generator.
CMAKE_EXTRA_GENERATOR:INTERNAL=
//Name of generator.
CMAKE_GENERATOR:INTERNAL=Visual Studio 17 2022
//Generator instance identifier.
CMAKE_GENERATOR_INSTANCE:INTERNAL=C:/Program Files/Microsoft Visual Studio/2022/Community
//Name of generator platform.
CMAKE_GENERATOR_PLATFORM:INTERNAL=
//Name of generator toolset.
CMAKE_GENERATOR_TOOLSET:INTERNAL=
//Have include pthread.h
CMAKE_HAVE_PTHREAD_H:INTERNAL=
//Source directory with the top level CMakeLists.txt file for this
// project
CMAKE_HOME_DIRECTORY:INTERNAL=C:/Users/dhaen/source/repos/convnet/dnn/deps/oneDNN
//ADVANCED property for variable: CMAKE_INSTALL_BINDIR
CMAKE_INSTALL_BINDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DATADIR
CMAKE_INSTALL_DATADIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DATAROOTDIR
CMAKE_INSTALL_DATAROOTDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DOCDIR
CMAKE_INSTALL_DOCDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_INCLUDEDIR
CMAKE_INSTALL_INCLUDEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_INFODIR
CMAKE_INSTALL_INFODIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LIBDIR
CMAKE_INSTALL_LIBDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LIBEXECDIR
CMAKE_INSTALL_LIBEXECDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LOCALEDIR
CMAKE_INSTALL_LOCALEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LOCALSTATEDIR
CMAKE_INSTALL_LOCALSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_MANDIR
CMAKE_INSTALL_MANDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_OLDINCLUDEDIR
CMAKE_INSTALL_OLDINCLUDEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_RUNSTATEDIR
CMAKE_INSTALL_RUNSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SBINDIR
CMAKE_INSTALL_SBINDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SHAREDSTATEDIR
CMAKE_INSTALL_SHAREDSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SYSCONFDIR
CMAKE_INSTALL_SYSCONFDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_LINKER
CMAKE_LINKER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS
CMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG
CMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE
CMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MT
CMAKE_MT-ADVANCED:INTERNAL=1
//number of local generators
CMAKE_NUMBER_OF_MAKEFILES:INTERNAL=7
//Platform information initialized
CMAKE_PLATFORM_INFO_INITIALIZED:INTERNAL=1
//noop for ranlib
CMAKE_RANLIB:INTERNAL=:
//ADVANCED property for variable: CMAKE_RC_COMPILER
CMAKE_RC_COMPILER-ADVANCED:INTERNAL=1
CMAKE_RC_COMPILER_WORKS:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS
CMAKE_RC_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_DEBUG
CMAKE_RC_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_MINSIZEREL
CMAKE_RC_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELEASE
CMAKE_RC_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELWITHDEBINFO
CMAKE_RC_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//Path to CMake installation.
CMAKE_ROOT:INTERNAL=C:/Program Files/CMake/share/cmake-3.22
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS
CMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG
CMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE
CMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHASSERT
CMAKE_SHARED_LINKER_FLAGS_RELWITHASSERT-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHMDD
CMAKE_SHARED_LINKER_FLAGS_RELWITHMDD-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH
CMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_RPATH
CMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS
CMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG
CMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE
CMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE
CMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: DOXYGEN_DOT_EXECUTABLE
DOXYGEN_DOT_EXECUTABLE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: DOXYGEN_EXECUTABLE
DOXYGEN_EXECUTABLE-ADVANCED:INTERNAL=1
//Details about finding Doxygen
FIND_PACKAGE_MESSAGE_DETAILS_Doxygen:INTERNAL=[C:/Program Files/doxygen/bin/doxygen.exe][cfound components: doxygen dot ][v1.9.2 (caa4e3de211fbbef2c3adf58a6bd4c86d0eb7cb8)()]
//Details about finding Doxyrest
FIND_PACKAGE_MESSAGE_DETAILS_Doxyrest:INTERNAL=[C:/doxyrest-2.1.3-windows-amd64/bin/doxyrest.exe][vdoxyrest v2.1.3 (amd64)()]
//Details about finding Git
FIND_PACKAGE_MESSAGE_DETAILS_Git:INTERNAL=[C:/Program Files/Git/cmd/git.exe][v2.34.0.windows.1()]
//Details about finding OpenMP
FIND_PACKAGE_MESSAGE_DETAILS_OpenMP:INTERNAL=[TRUE][TRUE][c ][v2.0()]
//Details about finding OpenMP_C
FIND_PACKAGE_MESSAGE_DETAILS_OpenMP_C:INTERNAL=[-openmp][v2.0()]
//Details about finding OpenMP_CXX
FIND_PACKAGE_MESSAGE_DETAILS_OpenMP_CXX:INTERNAL=[-openmp][v2.0()]
//Details about finding PythonInterp
FIND_PACKAGE_MESSAGE_DETAILS_PythonInterp:INTERNAL=[C:/Python39/python.exe][v3.9.7(2.7)]
//Details about finding Sphinx
FIND_PACKAGE_MESSAGE_DETAILS_Sphinx:INTERNAL=[C:/Python39/Scripts/sphinx-build.exe][vsphinx-build 4.2.0()]
//Details about finding Threads
FIND_PACKAGE_MESSAGE_DETAILS_Threads:INTERNAL=[TRUE][v()]
//ADVANCED property for variable: GIT_EXECUTABLE
GIT_EXECUTABLE-ADVANCED:INTERNAL=1
//Result of TRY_COMPILE
OpenMP_COMPILE_RESULT_CXX_openmp:INTERNAL=TRUE
//Result of TRY_COMPILE
OpenMP_COMPILE_RESULT_C_openmp:INTERNAL=TRUE
//ADVANCED property for variable: OpenMP_CXX_FLAGS
OpenMP_CXX_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: OpenMP_CXX_LIB_NAMES
OpenMP_CXX_LIB_NAMES-ADVANCED:INTERNAL=1
//CXX compiler's OpenMP specification date
OpenMP_CXX_SPEC_DATE:INTERNAL=200203
//ADVANCED property for variable: OpenMP_C_FLAGS
OpenMP_C_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: OpenMP_C_LIB_NAMES
OpenMP_C_LIB_NAMES-ADVANCED:INTERNAL=1
//C compiler's OpenMP specification date
OpenMP_C_SPEC_DATE:INTERNAL=200203
//Result of TRY_COMPILE
OpenMP_SPECTEST_CXX_:INTERNAL=TRUE
//Result of TRY_COMPILE
OpenMP_SPECTEST_C_:INTERNAL=TRUE
//ADVANCED property for variable: PYTHON_EXECUTABLE
PYTHON_EXECUTABLE-ADVANCED:INTERNAL=1
//CMAKE_INSTALL_PREFIX during last run
_GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX:INTERNAL=C:/Program Files (x86)/oneDNN

